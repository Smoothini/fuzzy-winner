switch 0 (in0s,out0s,out0s_2) [] {
 rule in0s => out0s []
 }
 final {
 rule in0s => out0s_2 []
 }
switch 3 (in3s,out3s,out3s_2) [] {
 rule in3s => out3s []
 }
 final {
 rule in3s => out3s_2 []
 }
switch 6 (in6s,out6s) [] {
 rule in6s => out6s []
 }
 final {
     
 }
switch 9 (in9s,out9s,out9s_2) [] {
 rule in9s => out9s []
 }
 final {
 rule in9s => out9s_2 []
 }
switch 10 (in10s,out10s,out10s_2) [] {
 rule in10s => out10s []
 }
 final {
 rule in10s => out10s_2 []
 }
switch 11 (in11s,out11s,out11s_2) [] {
 rule in11s => out11s []
 }
 final {
 rule in11s => out11s_2 []
 }
switch 7 (in7s,out7s_2) [] {

 }
 final {
 rule in7s => out7s_2 []
 }
switch 8 (in8s,out8s_2) [] {

 }
 final {
 rule in8s => out8s_2 []
 }
switch 12 (in12s,out12s) [] {
 rule in12s => out12s []
 }
 final {
 rule in12s => out12s []
 }
link  => in0s []
link out0s => in3s []
link out0s_2 => in3s []
link out3s => in6s []
link out3s_2 => in7s []
link out6s => in9s []
link out9s => in10s []
link out9s_2 => in10s []
link out10s => in11s []
link out10s_2 => in11s []
link out11s => in12s []
link out11s_2 => in12s []
link out7s_2 => in8s []
link out8s_2 => in9s []
spec
port=in0s -> (!(port=out12s) U ((port=in11s) & (TRUE U (port=out12s))))