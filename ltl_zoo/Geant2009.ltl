switch 0 (in0s,out0s,out0s_2) [] {
 rule in0s => out0s []
 }
 final {
 rule in0s => out0s_2 []
 }
switch 4 (in4s,out4s,out4s_2) [] {
 rule in4s => out4s []
 }
 final {
 rule in4s => out4s_2 []
 }
switch 8 (in8s,out8s,out8s_2) [] {
 rule in8s => out8s []
 }
 final {
 rule in8s => out8s_2 []
 }
switch 9 (in9s,out9s,out9s_2) [] {
 rule in9s => out9s []
 }
 final {
 rule in9s => out9s_2 []
 }
switch 10 (in10s,out10s,out10s_2) [] {
 rule in10s => out10s []
 }
 final {
 rule in10s => out10s_2 []
 }
switch 2 (in2s,out2s_2) [] {

 }
 final {
 rule in2s => out2s_2 []
 }
switch 20 (in20s,out20s) [] {
 rule in20s => out20s []
 }
 final {
 rule in20s => out20s []
 }
link  => in0s []
link out0s => in4s []
link out0s_2 => in2s []
link out4s => in8s []
link out4s_2 => in8s []
link out8s => in9s []
link out8s_2 => in9s []
link out9s => in10s []
link out9s_2 => in10s []
link out10s => in20s []
link out10s_2 => in20s []
link out2s_2 => in4s []
spec
port=in0s -> (!(port=out20s) U ((port=in8s) & (TRUE U (port=out20s))))